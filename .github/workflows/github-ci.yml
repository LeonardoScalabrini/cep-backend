name: GitHub CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
    - uses: actions/checkout@v2
    - name: Start containers
      run: docker-compose -f docker-compose.yml up -d mongo
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm test
    - uses: actions/checkout@v2
    - name: Stop containers
      run: docker-compose -f docker-compose.yml down
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    - name: SonarQube Quality Gate check
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  cd:
    needs: [ci]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - run: export TF_VAR_project_id=${{ secrets.CLOUD_PROJECT_ID }}
    - run: export TF_VAR_private_key_id=${{ secrets.CLOUD_PROJECT_KEY_ID }}
    - run: export TF_VAR_private_key=${{ secrets.CLOUD_PROJECT_KEY }}
    - run: export TF_VAR_client_email=${{ secrets.CLOUD_CLIENT_EMAIL }}
    - run: export TF_VAR_client_id=${{ secrets.CLOUD_CLIENT_ID }}
    - run: export TF_VAR_client_x509_cert_url=${{ secrets.CLOUD_CERT_URL }}
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - name: Terraform Init
      run: terraform init
    - name: Terraform Plan
      run: terraform plan
    - name: Terraform Apply
      run: terraform apply -auto-approve
