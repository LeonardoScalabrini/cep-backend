name: GitHub CI

on:
  push:
    branches: [ master ]

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
    - uses: actions/checkout@v2
    - name: Start containers
      run: docker-compose -f docker-compose.yml up -d mongo
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm test
    - uses: actions/checkout@v2
    - name: Stop containers
      run: docker-compose -f docker-compose.yml down
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    - name: SonarQube Quality Gate check
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  cd:
    needs: [ci]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - run: npm ci
    - uses: google-github-actions/setup-gcloud@master
      with:
        service_account_email: ${{ secrets.GCR_EMAIL_ACCOUNT }}
        service_account_key: ${{ secrets.GCR_DEVOPS_SERVICE_ACCOUNT_KEY }}
    - run: |
        gcloud auth configure-docker
    - name: Image
      run: |-
        docker build -t $IMAGE_NAME:$GITHUB_SHA .
      env:
       IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
    - name: Start clair container
      run: |-
        docker-compose -f docker-compose.clair.yml up -d
        docker image tag $IMAGE_NAME:$GITHUB_SHA localhost:5000/$IMAGE_NAME:$GITHUB_SHA
        docker push localhost:5000/$IMAGE_NAME:$GITHUB_SHA
      env:
       IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
    - uses: actions/setup-python@v2
      with:
        python-version: 3.8 
    - name: "claircli"
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install claircli
        claircli -V
        claircli localhost:5000/$IMAGE_NAME:$GITHUB_SHA
      env:
        IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
    - name: Stop clair container
      run: |
        docker-compose -f docker-compose.clair.yml down
    - name: Print clair result
      run: |
        cat *.html
    - name: Tag
      run: |-
        docker tag $IMAGE_NAME:$GITHUB_SHA gcr.io/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA
      env:
       IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
       PROJECT_ID: ${{ secrets.PROJECT_ID }}
    - name: Build
      run: |-
        docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA
      env:
       IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
       PROJECT_ID: ${{ secrets.PROJECT_ID }}
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    - name: Terraform Init
      run: terraform init
    - name: Terraform fmt
      run: terraform fmt -diff -check
    - name: Terraform Plan
      run: terraform plan
    - name: Terraform Apply
      run: terraform apply -auto-approve
    - uses: google-github-actions/setup-gcloud@master
      with:
        service_account_email: ${{ secrets.GCR_EMAIL_ACCOUNT }}
        service_account_key: ${{ secrets.GCR_DEVOPS_SERVICE_ACCOUNT_KEY }}
    - name: Update Config
      run: |-
        gcloud config set project $PROJECT_ID
      env:
       PROJECT_ID: ${{ secrets.PROJECT_ID }}
    - name: Update Image
      run: |-
        gcloud run deploy $IMAGE_NAME --image gcr.io/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA --region $REGION
      env:
       IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
       PROJECT_ID: ${{ secrets.PROJECT_ID }}
       REGION: ${{ secrets.REGION }}